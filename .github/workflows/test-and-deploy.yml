name: "Test and Delopy"
on: push

jobs:
  initialise-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: initialise workflow
        run: echo "initialising workflow"

  # run-checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11.1'

  #     - name: Configure AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Install Requirements
  #       run: make requirements

  #     - name: Run Security Checks
  #       run: make security-test

  #     - name: Run Flake Checks
  #       run: make run-flake

  #     - name: Run Coverage Checks
  #       run: make check-coverage

  # run-unit-tests:
  #   runs-on: ubuntu-latest
  #   needs: run-checks
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Configure AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11.1'

  #     - name: Install Requirements
  #       run: make requirements

  #     - name: Run Unit Tests
  #       run: make unit-test

  deploy:
    runs-on: ubuntu-latest
    # needs: run-unit-tests
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: make sure bucket is created
        working-directory: terraform
        run: |
          if aws s3api get-object \
          --bucket ${{secrets.BACKEND_BUCKET_NAME}} \
          --key production/terraform.tfstate \
           instances.json
          then 
            xxx=$(jq '.resources[0].instances' instances.json)
            if [jq -e . >/dev/null 2>&1 <<<"$xxx"] ; then
               echo "bucket created already, instances file is ready"
            else
               echo 'been destroy, has to init and create bucket '
               terraform init
               terraform apply \
               -target=module.nc_project_init_bucket_module \
               -auto-approve\
               -var bucketname='only-for-testing2-' 
            fi
          else 
          echo 'start init and create bucket'
          terraform init
          terraform apply \
          -target=module.nc_project_init_bucket_module \
          -auto-approve\
          -var bucketname='only-for-testing2-' 
          fi

      - name: get bucket name passed to event target
        working-directory: terraform
        # run: |
        #   aws s3api get-object \
        #   --bucket nc-project-backend20231107140228968000000001 \
        #   --key production/terraform.tfstate \
        #   instances.json
        #   cat ./instances.json
        run: |
          terraform apply \
          -var tfstate_trigger=$(terraform output data_bucket_name)
          -auto-approve
      # - name: Terraform apply
      #   working-directory: terraform
      #   run: |
      #     cat test.json

      # - name: Terraform plan
      #   working-directory: terraform
      #   run: terraform plan

      # - name: Terraform apply
      #   working-directory: terraform
      #   run: terraform apply -auto-approve
